# Build stage
FROM node:20-alpine as build

WORKDIR /app

# Add build mode argument
ARG BUILD_MODE=production
ENV BUILD_MODE=${BUILD_MODE}

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci

# Fix esbuild version issue
RUN npm rebuild esbuild

# Copy source code
COPY . .

# Build the app based on mode
RUN if [ "$$BUILD_MODE" = "production" ]; then \
        npm run build; \
    else \
        npm run build -- --mode development; \
    fi

# Production stage
FROM nginx:alpine

# Install necessary tools for SSL
RUN apk add --no-cache openssl

# Create directory for certificates
RUN mkdir -p /etc/nginx/ssl

# Add environment variable for domain
ENV DOMAIN fordrunners.club

# Copy build files from build stage
COPY --from=build /app/dist /usr/share/nginx/html

# Copy configuration files
COPY nginx.ssl.conf /etc/nginx/conf.d/production.conf
COPY nginx.dev.conf /etc/nginx/conf.d/development.conf
COPY nginx.local.conf /etc/nginx/conf.d/local.conf

# Create entrypoint script
RUN echo '#!/bin/sh' > /docker-entrypoint.d/30-config-nginx.sh && \
    echo 'if [ "$$DOMAIN" = "dev.fordrunners.club" ]; then' >> /docker-entrypoint.d/30-config-nginx.sh && \
    echo '  cp /etc/nginx/conf.d/development.conf /etc/nginx/conf.d/default.conf' >> /docker-entrypoint.d/30-config-nginx.sh && \
    echo 'elif [ "$$DOMAIN" = "local" ]; then' >> /docker-entrypoint.d/30-config-nginx.sh && \
    echo '  cp /etc/nginx/conf.d/local.conf /etc/nginx/conf.d/default.conf' >> /docker-entrypoint.d/30-config-nginx.sh && \
    echo 'else' >> /docker-entrypoint.d/30-config-nginx.sh && \
    echo '  cp /etc/nginx/conf.d/production.conf /etc/nginx/conf.d/default.conf' >> /docker-entrypoint.d/30-config-nginx.sh && \
    echo 'fi' >> /docker-entrypoint.d/30-config-nginx.sh && \
    chmod +x /docker-entrypoint.d/30-config-nginx.sh

# Expose both HTTP and HTTPS ports
EXPOSE 80 443

# Start Nginx
CMD ["nginx", "-g", "daemon off;"]